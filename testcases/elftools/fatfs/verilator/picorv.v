// generated by picorv_core.py
module picorv_core #(
  parameter integer CPI = 2,
  parameter integer CSRS = 1,
  parameter integer XLEN = 32,
  parameter integer ILEN = 32,
  parameter integer IALIGN = 16,
  parameter integer RPORTS = 3,
  parameter [XLEN-1:0] SPINIT = 1
) (
  // control
  input            clock,
  input            reset,
  input [XLEN-1:0] rvec,

  // memory interface
  output            mem_valid,
  input             mem_ready,
  output            mem_insn,
  output [XLEN-1:0] mem_addr,
  input  [XLEN-1:0] mem_rdata,
  output [XLEN-1:0] mem_wdata,
  output [XLEN/8 - 1:0] mem_wstrb,

  // decode
  output            decode_valid,
  output [ILEN-1:0] decode_insn,
  output [    15:0] decode_prefix,

  // pcpi
  output            pcpi_valid,
  output [ILEN-1:0] pcpi_insn,
  output [    15:0] pcpi_prefix,
  output [XLEN-1:0] pcpi_pc,
  output            pcpi_rs1_valid,
  output [XLEN-1:0] pcpi_rs1_data,
  output            pcpi_rs2_valid,
  output [XLEN-1:0] pcpi_rs2_data,
  output            pcpi_rs3_valid,
  output [XLEN-1:0] pcpi_rs3_data,
  input             pcpi_ready,
  output            pcpi_wb_valid,
  input             pcpi_wb_async,
  input             pcpi_wb_write,
  input  [XLEN-1:0] pcpi_wb_data,
  input             pcpi_br_enable,
  input  [XLEN-1:0] pcpi_br_nextpc,

  // async writeback
  input             awb_valid,
  output            awb_ready,
  input  [     4:0] awb_addr,
  input  [XLEN-1:0] awb_data,
  output halt
);
  wire pcpi_ready_ctrl;

  wire            mem_reqst_csrs = 0;
  wire            mem_grant_csrs;
  wire            mem_valid_csrs = 0;
  wire            mem_ready_csrs;
  wire [XLEN-1:0] mem_addr_csrs = 0;
  wire [    63:0] mem_wdata_csrs = 0;
  wire [     7:0] mem_wstrb_csrs = 0;
  wire            pcpi_ready_csrs;
  wire            pcpi_wb_write_csrs;
  wire            pcpi_wb_async_csrs = 0;
  wire [XLEN-1:0] pcpi_wb_data_csrs;
  wire            pcpi_br_enable_csrs = 0;
  wire [XLEN-1:0] pcpi_br_nextpc_csrs = 0;
  wire            awb_valid_csrs = 0;
  wire            awb_ready_csrs;
  wire [     4:0] awb_addr_csrs = 0;
  wire [XLEN-1:0] awb_data_csrs = 0;
  wire csrinsn_valid = pcpi_valid && pcpi_insn[6:0] == 7'b 1110011 && pcpi_insn[13:12] != 2'b 00 && (pcpi_rs1_valid || pcpi_insn[14]);
  wire [11:0] csrinsn_addr = pcpi_insn[31:20];
  wire [XLEN-1:0] csrinsn_data = pcpi_insn[14] ? pcpi_insn[19:15] : pcpi_rs1_data;
  wire [1:0] csrinsn_op = pcpi_insn[13:12];
  reg csrinsn_ready;
  reg [XLEN-1:0] csrinsn_out;
  wire [XLEN-1:0] csrinsn_clr = 0;
  wire [XLEN-1:0] csrinsn_set = 0;
  reg  [XLEN-1:0] csr_mcycle;
  reg  [XLEN-1:0] csr_mcycle_reg;
  wire [XLEN-1:0] csr_mcycle_clr = 0;
  wire [XLEN-1:0] csr_mcycle_set = 0;
  always @(posedge clock) csr_mcycle_reg <= reset ? 0 : csr_mcycle;
  reg  [XLEN-1:0] csr_minstret;
  reg  [XLEN-1:0] csr_minstret_reg;
  wire [XLEN-1:0] csr_minstret_clr = 0;
  wire [XLEN-1:0] csr_minstret_set = 0;
  always @(posedge clock) csr_minstret_reg <= reset ? 0 : csr_minstret;
  reg  [XLEN-1:0] csr_mcycleh;
  reg  [XLEN-1:0] csr_mcycleh_reg;
  wire [XLEN-1:0] csr_mcycleh_clr = 0;
  wire [XLEN-1:0] csr_mcycleh_set = 0;
  always @(posedge clock) csr_mcycleh_reg <= reset ? 0 : csr_mcycleh;
  reg  [XLEN-1:0] csr_minstreth;
  reg  [XLEN-1:0] csr_minstreth_reg;
  wire [XLEN-1:0] csr_minstreth_clr = 0;
  wire [XLEN-1:0] csr_minstreth_set = 0;
  always @(posedge clock) csr_minstreth_reg <= reset ? 0 : csr_minstreth;
  always @* begin
    csrinsn_ready = 0;
    csrinsn_out = 0;
    csr_mcycle = csr_mcycle_reg;
    csr_minstret = csr_minstret_reg;
    csr_mcycleh = csr_mcycleh_reg;
    csr_minstreth = csr_minstreth_reg;
    if (csrinsn_valid) begin
      case (csrinsn_addr)
        12'h c00: begin csrinsn_ready = 1; csrinsn_out = csr_mcycle; csr_mcycle = (csr_mcycle & ~csrinsn_clr) | csrinsn_set; end
        12'h c02: begin csrinsn_ready = 1; csrinsn_out = csr_minstret; csr_minstret = (csr_minstret & ~csrinsn_clr) | csrinsn_set; end
        12'h c80: begin csrinsn_ready = 1; csrinsn_out = csr_mcycleh; csr_mcycleh = (csr_mcycleh & ~csrinsn_clr) | csrinsn_set; end
        12'h c82: begin csrinsn_ready = 1; csrinsn_out = csr_minstreth; csr_minstreth = (csr_minstreth & ~csrinsn_clr) | csrinsn_set; end
      endcase
    end else begin
      csr_mcycle = (csr_mcycle & ~csr_mcycle_clr) | csr_mcycle_set;
      csr_minstret = (csr_minstret & ~csr_minstret_clr) | csr_minstret_set;
      csr_mcycleh = (csr_mcycleh & ~csr_mcycleh_clr) | csr_mcycleh_set;
      csr_minstreth = (csr_minstreth & ~csr_minstreth_clr) | csr_minstreth_set;
    end

        {csr_mcycleh, csr_mcycle} = {csr_mcycleh, csr_mcycle} + 1;
        {csr_minstreth, csr_minstret} = {csr_minstreth, csr_minstret} + (pcpi_valid && pcpi_ready_ctrl);
    
    if (!CSRS) begin
      csr_mcycle = 0;
      csr_minstret = 0;
      csr_mcycleh = 0;
      csr_minstreth = 0;
    end
  end
  assign pcpi_ready_csrs = csrinsn_ready && pcpi_valid && pcpi_wb_valid;
  assign pcpi_wb_write_csrs = pcpi_ready_csrs;
  assign pcpi_wb_data_csrs = pcpi_ready_csrs ? csrinsn_out : 0;
  
  assign halt = pcpi_valid && pcpi_insn == 32'h00100073;
  
  wire            mem_reqst_exec;
  wire            mem_grant_exec;
  wire            mem_valid_exec;
  wire            mem_ready_exec;
  wire [XLEN-1:0] mem_addr_exec;
  wire [    31:0] mem_wdata_exec;
  wire [     3:0] mem_wstrb_exec;
  wire            pcpi_ready_exec;
  wire            pcpi_wb_write_exec;
  wire            pcpi_wb_async_exec;
  wire [XLEN-1:0] pcpi_wb_data_exec;
  wire            pcpi_br_enable_exec;
  wire [XLEN-1:0] pcpi_br_nextpc_exec;
  wire            awb_valid_exec;
  wire            awb_ready_exec;
  wire [     4:0] awb_addr_exec;
  wire [XLEN-1:0] awb_data_exec;
  picorv_exec #(
    .XLEN(XLEN)
  , .ILEN(ILEN)
  , .CPI(CPI)
  ) exec (
    .clock          (clock         )
  , .reset          (reset         )
  , .decode_valid   (decode_valid  )
  , .decode_insn    (decode_insn   )
  , .decode_prefix  (decode_prefix )
  , .pcpi_valid     (pcpi_valid    )
  , .pcpi_insn      (pcpi_insn     )
  , .pcpi_prefix    (pcpi_prefix   )
  , .pcpi_pc        (pcpi_pc       )
  , .pcpi_rs1_valid (pcpi_rs1_valid)
  , .pcpi_rs1_data  (pcpi_rs1_data )
  , .pcpi_rs2_valid (pcpi_rs2_valid)
  , .pcpi_rs2_data  (pcpi_rs2_data )
  , .pcpi_rs3_valid (pcpi_rs3_valid)
  , .pcpi_rs3_data  (pcpi_rs3_data )
  , .pcpi_ready     (pcpi_ready_exec    )
  , .pcpi_wb_valid  (pcpi_wb_valid    )
  , .pcpi_wb_write  (pcpi_wb_write_exec )
  , .pcpi_wb_data   (pcpi_wb_data_exec  )
  , .pcpi_br_enable (pcpi_br_enable_exec)
  , .pcpi_br_nextpc (pcpi_br_nextpc_exec)
  );
  assign mem_reqst_exec = 0;
  assign mem_valid_exec = 0;
  assign mem_addr_exec = 0;
  assign mem_wdata_exec = 0;
  assign mem_wstrb_exec = 0;
  assign pcpi_wb_async_exec = 0;
  assign awb_valid_exec = 0;
  assign awb_addr_exec = 0;
  assign awb_data_exec = 0;
  wire            mem_reqst_ldst;
  wire            mem_grant_ldst;
  wire            mem_valid_ldst;
  wire            mem_ready_ldst;
  wire [XLEN-1:0] mem_addr_ldst;
  wire [XLEN-1:0] mem_wdata_ldst;
  wire [XLEN/8-1:0] mem_wstrb_ldst;
  wire            pcpi_ready_ldst;
  wire            pcpi_wb_write_ldst;
  wire            pcpi_wb_async_ldst;
  wire [XLEN-1:0] pcpi_wb_data_ldst;
  wire            pcpi_br_enable_ldst;
  wire [XLEN-1:0] pcpi_br_nextpc_ldst;
  wire            awb_valid_ldst;
  wire            awb_ready_ldst;
  wire [     4:0] awb_addr_ldst;
  wire [XLEN-1:0] awb_data_ldst;
  picorv_ldst #(
    .XLEN(XLEN)
  , .ILEN(ILEN)
  ) ldst (
    .clock          (clock         )
  , .reset          (reset         )
  , .mem_reqst (mem_reqst_ldst)
  , .mem_grant (mem_grant_ldst)
  , .mem_valid (mem_valid_ldst)
  , .mem_ready (mem_ready_ldst)
  , .mem_addr  (mem_addr_ldst )
  , .mem_rdata (mem_rdata)
  , .mem_wdata (mem_wdata_ldst )
  , .mem_wstrb (mem_wstrb_ldst )
  , .decode_valid   (decode_valid  )
  , .decode_insn    (decode_insn   )
  , .decode_prefix  (decode_prefix )
  , .pcpi_valid     (pcpi_valid    )
  , .pcpi_insn      (pcpi_insn     )
  , .pcpi_prefix    (pcpi_prefix   )
  , .pcpi_pc        (pcpi_pc       )
  , .pcpi_rs1_valid (pcpi_rs1_valid)
  , .pcpi_rs1_data  (pcpi_rs1_data )
  , .pcpi_rs2_valid (pcpi_rs2_valid)
  , .pcpi_rs2_data  (pcpi_rs2_data )
  , .pcpi_rs3_valid (pcpi_rs3_valid)
  , .pcpi_rs3_data  (pcpi_rs3_data )
  , .pcpi_ready     (pcpi_ready_ldst    )
  , .pcpi_wb_valid  (pcpi_wb_valid    )
  , .pcpi_wb_write  (pcpi_wb_write_ldst )
  , .pcpi_wb_data   (pcpi_wb_data_ldst  )
  , .pcpi_wb_async  (pcpi_wb_async_ldst )
  , .awb_valid      (awb_valid_ldst)
  , .awb_ready      (awb_ready_ldst)
  , .awb_addr       (awb_addr_ldst)
  , .awb_data       (awb_data_ldst)
  );
  assign pcpi_br_enable_ldst = 0;
  assign pcpi_br_nextpc_ldst = 0;
  wire            mem_valid_ctrl;
  wire            mem_ready_ctrl;
  wire [XLEN-1:0] mem_addr_ctrl;
  wire [XLEN-1:0] mem_wdata_ctrl = 0;
  wire      [3:0] mem_wstrb_ctrl = 0;
  wire            awb_valid_ctrl;
  wire            awb_ready_ctrl;
  wire [     4:0] awb_addr_ctrl;
  wire [XLEN-1:0] awb_data_ctrl;
  reg arb_mem_ctrl_reg;
  reg arb_mem_csrs_reg;
  reg arb_mem_exec_reg;
  reg arb_mem_ldst_reg;
  wire arb_mem_csrs = mem_reqst_csrs && !(mem_reqst_exec && arb_mem_exec_reg) && !(mem_reqst_ldst && arb_mem_ldst_reg);
  assign mem_ready_csrs = arb_mem_csrs && mem_ready;
  assign mem_grant_csrs = arb_mem_csrs;
  always @(posedge clock) arb_mem_csrs_reg <= reset ? 0 : arb_mem_csrs;
  wire arb_mem_exec = !arb_mem_csrs && mem_reqst_exec && !(mem_reqst_ldst && arb_mem_ldst_reg);
  assign mem_ready_exec = arb_mem_exec && mem_ready;
  assign mem_grant_exec = arb_mem_exec;
  always @(posedge clock) arb_mem_exec_reg <= reset ? 0 : arb_mem_exec;
  wire arb_mem_ldst = !arb_mem_csrs && !arb_mem_exec && mem_reqst_ldst;
  assign mem_ready_ldst = arb_mem_ldst && mem_ready;
  assign mem_grant_ldst = arb_mem_ldst;
  always @(posedge clock) arb_mem_ldst_reg <= reset ? 0 : arb_mem_ldst;
  wire arb_mem_ctrl = mem_valid_ctrl && !arb_mem_csrs && !arb_mem_exec && !arb_mem_ldst;
  assign mem_ready_ctrl = arb_mem_ctrl && mem_ready;
  always @(posedge clock) arb_mem_ctrl_reg <= reset ? 0 : arb_mem_ctrl;
  wire arb_awb_csrs = !awb_valid && awb_valid_csrs;
  assign awb_ready_csrs = arb_awb_csrs && awb_ready_ctrl;
  wire arb_awb_exec = !awb_valid && awb_valid_exec && !awb_valid_csrs;
  assign awb_ready_exec = arb_awb_exec && awb_ready_ctrl;
  wire arb_awb_ldst = !awb_valid && awb_valid_ldst && !awb_valid_csrs && !awb_valid_exec;
  assign awb_ready_ldst = arb_awb_ldst && awb_ready_ctrl;
  assign mem_valid = (arb_mem_ctrl ? mem_valid_ctrl : 0) | (arb_mem_csrs ? mem_valid_csrs : 0) | (arb_mem_exec ? mem_valid_exec : 0) | (arb_mem_ldst ? mem_valid_ldst : 0);
  assign mem_addr = (arb_mem_ctrl ? mem_addr_ctrl : 0) | (arb_mem_csrs ? mem_addr_csrs : 0) | (arb_mem_exec ? mem_addr_exec : 0) | (arb_mem_ldst ? mem_addr_ldst : 0);
  assign mem_wdata = (arb_mem_ctrl ? mem_wdata_ctrl : 0) | (arb_mem_csrs ? mem_wdata_csrs : 0) | (arb_mem_exec ? mem_wdata_exec : 0) | (arb_mem_ldst ? mem_wdata_ldst : 0);
  assign mem_wstrb = (arb_mem_ctrl ? mem_wstrb_ctrl : 0) | (arb_mem_csrs ? mem_wstrb_csrs : 0) | (arb_mem_exec ? mem_wstrb_exec : 0) | (arb_mem_ldst ? mem_wstrb_ldst : 0);
  assign mem_insn = arb_mem_ctrl;
  assign awb_valid_ctrl = awb_valid ? awb_valid : (arb_awb_csrs ? awb_valid_csrs : 0) | (arb_awb_exec ? awb_valid_exec : 0) | (arb_awb_ldst ? awb_valid_ldst : 0);
  assign awb_addr_ctrl = awb_valid ? awb_addr : (arb_awb_csrs ? awb_addr_csrs : 0) | (arb_awb_exec ? awb_addr_exec : 0) | (arb_awb_ldst ? awb_addr_ldst : 0);
  assign awb_data_ctrl = awb_valid ? awb_data : (arb_awb_csrs ? awb_data_csrs : 0) | (arb_awb_exec ? awb_data_exec : 0) | (arb_awb_ldst ? awb_data_ldst : 0);
  assign awb_ready = awb_valid && awb_ready_ctrl;
assign pcpi_ready_ctrl = pcpi_ready|pcpi_ready_csrs|pcpi_ready_exec|pcpi_ready_ldst;
  picorv_ctrl #(
    .XLEN(XLEN)
  , .ILEN(ILEN)
  , .IALIGN(IALIGN)
  , .RPORTS(RPORTS)
  , .SPINIT(SPINIT)
  ) ctrl (
    .clock          (clock         )
  , .reset          (reset         )
  , .rvec           (rvec          )
  , .mem_valid (mem_valid_ctrl)
  , .mem_ready (mem_ready_ctrl)
  , .mem_addr  (mem_addr_ctrl )
  , .mem_rdata (mem_rdata)
  , .decode_valid  (decode_valid  )
  , .decode_insn   (decode_insn   )
  , .decode_prefix (decode_prefix )
  , .pcpi_valid    (pcpi_valid    )
  , .pcpi_insn     (pcpi_insn     )
  , .pcpi_prefix   (pcpi_prefix   )
  , .pcpi_pc       (pcpi_pc       )
  , .pcpi_rs1_valid(pcpi_rs1_valid)
  , .pcpi_rs1_data (pcpi_rs1_data )
  , .pcpi_rs2_valid(pcpi_rs2_valid)
  , .pcpi_rs2_data (pcpi_rs2_data )
  , .pcpi_rs3_valid(pcpi_rs3_valid)
  , .pcpi_rs3_data (pcpi_rs3_data )
  , .pcpi_ready    (pcpi_ready_ctrl)
  , .pcpi_wb_valid (pcpi_wb_valid)
  , .pcpi_wb_async (pcpi_wb_async|pcpi_wb_async_csrs|pcpi_wb_async_exec|pcpi_wb_async_ldst)
  , .pcpi_wb_write (pcpi_wb_write|pcpi_wb_write_csrs|pcpi_wb_write_exec|pcpi_wb_write_ldst)
  , .pcpi_wb_data  (pcpi_wb_data|pcpi_wb_data_csrs|pcpi_wb_data_exec|pcpi_wb_data_ldst)
  , .pcpi_br_enable(pcpi_br_enable|pcpi_br_enable_csrs|pcpi_br_enable_exec|pcpi_br_enable_ldst)
  , .pcpi_br_nextpc(pcpi_br_nextpc|pcpi_br_nextpc_csrs|pcpi_br_nextpc_exec|pcpi_br_nextpc_ldst)
  , .awb_valid(awb_valid_ctrl)
  , .awb_ready(awb_ready_ctrl)
  , .awb_addr (awb_addr_ctrl)
  , .awb_data (awb_data_ctrl)
  );
endmodule
